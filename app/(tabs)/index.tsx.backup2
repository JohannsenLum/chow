import { IconSymbol } from '@/components/ui/icon-symbol';
import * as Location from 'expo-location';
import { router } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
  Alert,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View
} from 'react-native';
import MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';

interface PetLocation {
  id: string;
  title: string;
  description: string;
  coordinate: {
    latitude: number;
    longitude: number;
  };
  type: 'park' | 'vet' | 'store' | 'cafe' | 'grooming';
  rating: number;
}

const mockPetLocations: PetLocation[] = [
  {
    id: '1',
    title: 'Central Dog Park',
    description: 'Large off-leash area with agility course',
    coordinate: { latitude: 37.7849, longitude: -122.4094 },
    type: 'park',
    rating: 4.8
  },
  {
    id: '2',
    title: 'Pet Paradise Store',
    description: 'Premium pet supplies and accessories',
    coordinate: { latitude: 37.7849, longitude: -122.4074 },
    type: 'store',
    rating: 4.6
  },
  {
    id: '3',
    title: 'Paws & Claws Vet',
    description: '24/7 emergency veterinary care',
    coordinate: { latitude: 37.7829, longitude: -122.4084 },
    type: 'vet',
    rating: 4.9
  },
  {
    id: '4',
    title: 'Doggy Cafe',
    description: 'Pet-friendly cafe with outdoor seating',
    coordinate: { latitude: 37.7869, longitude: -122.4104 },
    type: 'cafe',
    rating: 4.5
  },
  {
    id: '5',
    title: 'Furry Friends Grooming',
    description: 'Professional pet grooming services',
    coordinate: { latitude: 37.7839, longitude: -122.4064 },
    type: 'grooming',
    rating: 4.7
  }
];

const getMarkerColor = (type: PetLocation['type']) => {
  switch (type) {
    case 'park': return '#4CAF50';
    case 'vet': return '#F44336';
    case 'store': return '#2196F3';
    case 'cafe': return '#FF9800';
    case 'grooming': return '#9C27B0';
    default: return '#757575';
  }
};

const getMarkerIcon = (type: PetLocation['type']) => {
  switch (type) {
    case 'park': return 'leaf.fill';
    case 'vet': return 'cross.fill';
    case 'store': return 'bag.fill';
    case 'cafe': return 'cup.and.saucer.fill';
    case 'grooming': return 'scissors';
    default: return 'mappin';
  }
};

export default function MapScreen() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [selectedLocation, setSelectedLocation] = useState<PetLocation | null>(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission denied', 'Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  const handleMarkerPress = (petLocation: PetLocation) => {
    setSelectedLocation(petLocation);
  };

  const handleGetDirections = () => {
    if (selectedLocation) {
      Alert.alert(
        'Directions',
        `Getting directions to ${selectedLocation.title}`,
        [{ text: 'OK' }]
      );
    }
  };

  return (
    <View style={styles.container}>
      {/* Map - Full Screen */}
      <MapView
        style={styles.map}
        provider={PROVIDER_GOOGLE}
        initialRegion={{
          latitude: location?.coords.latitude || 37.7849,
          longitude: location?.coords.longitude || -122.4094,
          latitudeDelta: 0.01,
          longitudeDelta: 0.01,
        }}
        showsUserLocation={true}
        showsMyLocationButton={false}
        mapType="standard"
        customMapStyle={[
          {
            featureType: "landscape",
            elementType: "geometry.fill",
            stylers: [
              {
                color: "#e8f5e8"
              }
            ]
          },
          {
            featureType: "water",
            elementType: "geometry.fill",
            stylers: [
              {
                color: "#87CEEB"
              }
            ]
          }
        ]}
      >
        {mockPetLocations.map((petLocation) => (
          <Marker
            key={petLocation.id}
            coordinate={petLocation.coordinate}
            onPress={() => handleMarkerPress(petLocation)}
          >
            <View style={[styles.markerContainer, { backgroundColor: getMarkerColor(petLocation.type) }]}>
              <IconSymbol
                name={getMarkerIcon(petLocation.type)}
                size={20}
                color="#fff"
              />
            </View>
          </Marker>
        ))}
      </MapView>

      {/* Floating Wireframe Icon and EXP - Overlaying Map */}
      <View style={styles.floatingHeader}>
        <TouchableOpacity
          style={styles.wireframeButton}
          onPress={() => router.push('/scan-pet')}
        >
          <IconSymbol name="square.grid.3x3" size={24} color="#333" />
        </TouchableOpacity>
        <View style={styles.expContainer}>
          <Text style={styles.expLabel}>EXP</Text>
          <View style={styles.expValue}>
            <IconSymbol name="pawprint.fill" size={16} color="#4CAF50" />
            <Text style={styles.expText}>240</Text>
          </View>
        </View>
      </View>

      {/* Location Details Card */}
      {selectedLocation && (
        <View style={styles.locationCard}>
          <View style={styles.cardHeader}>
            <View style={styles.locationInfo}>
              <Text style={styles.locationTitle}>{selectedLocation.title}</Text>
              <Text style={styles.locationDescription}>{selectedLocation.description}</Text>
              <View style={styles.ratingContainer}>
                <IconSymbol name="star.fill" size={16} color="#FFD700" />
                <Text style={styles.rating}>{selectedLocation.rating}</Text>
                <Text style={styles.ratingText}>â€¢ {selectedLocation.type}</Text>
              </View>
            </View>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setSelectedLocation(null)}
            >
              <IconSymbol name="xmark" size={20} color="#666" />
            </TouchableOpacity>
          </View>

          <View style={styles.cardActions}>
            <TouchableOpacity
              style={styles.directionsButton}
              onPress={handleGetDirections}
            >
              <IconSymbol name="location.fill" size={20} color="#fff" />
              <Text style={styles.directionsText}>Directions</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.callButton}>
              <IconSymbol name="phone.fill" size={20} color="#4CAF50" />
              <Text style={styles.callText}>Call</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.saveButton}>
              <IconSymbol name="bookmark" size={20} color="#666" />
              <Text style={styles.saveText}>Save</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  map: {
    flex: 1,
  },
  floatingHeader: {
    position: 'absolute',
    top: 50,
    right: 20,
    zIndex: 10,
    alignItems: 'flex-end',
  },
  wireframeButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  expContainer: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    alignItems: 'center',
  },
  expLabel: {
    fontSize: 12,
    color: '#fff',
    fontWeight: '600',
    marginBottom: 2,
  },
  expValue: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  expText: {
    fontSize: 14,
    color: '#fff',
    fontWeight: 'bold',
    marginLeft: 4,
  },
  markerContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 2,
    borderColor: '#fff',
  },
  locationCard: {
    position: 'absolute',
    bottom: 100,
    left: 20,
    right: 20,
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.15,
    shadowRadius: 12,
    elevation: 8,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 15,
  },
  locationInfo: {
    flex: 1,
  },
  locationTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  locationDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  rating: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginLeft: 4,
  },
  ratingText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 4,
  },
  closeButton: {
    padding: 4,
  },
  cardActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  directionsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#4CAF50',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 20,
    flex: 1,
    marginRight: 8,
    justifyContent: 'center',
  },
  directionsText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 6,
  },
  callButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 20,
    marginRight: 8,
  },
  callText: {
    color: '#4CAF50',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 6,
  },
  saveButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: 16,
    paddingVertical: 10,
    borderRadius: 20,
  },
  saveText: {
    color: '#666',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 6,
  },
});
